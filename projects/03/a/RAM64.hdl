// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=true, sel=address[0..2], a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7);

    And(a=ram0, b=load, out=loadRam0);
    And(a=ram1, b=load, out=loadRam1);
    And(a=ram2, b=load, out=loadRam2);
    And(a=ram3, b=load, out=loadRam3);
    And(a=ram4, b=load, out=loadRam4);
    And(a=ram5, b=load, out=loadRam5);
    And(a=ram6, b=load, out=loadRam6);
    And(a=ram7, b=load, out=loadRam7);

    RAM8(in=in, load=loadRam0, address=address[3..5], out=o0);
    RAM8(in=in, load=loadRam1, address=address[3..5], out=o1);
    RAM8(in=in, load=loadRam2, address=address[3..5], out=o2);
    RAM8(in=in, load=loadRam3, address=address[3..5], out=o3);
    RAM8(in=in, load=loadRam4, address=address[3..5], out=o4);
    RAM8(in=in, load=loadRam5, address=address[3..5], out=o5);
    RAM8(in=in, load=loadRam6, address=address[3..5], out=o6);
    RAM8(in=in, load=loadRam7, address=address[3..5], out=o7);

    Mux8Way16(a=o0, b=o1, c=o2, d=o3, e=o4, f=o5, g=o6, h=o7, sel=address[0..2], out=out);
}