// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Instruction: (0.. | 111accccccdddjjj)
    // Get type of instruction (A or C)
    Or(a=instruction[15], b=false, out=instructionType);

    // Get x
    Or(a=instruction[13], b=false, out=x2);
    Or(a=instruction[14], b=false, out=x1);


    // Get j (jump)
    Or(a=instruction[0], b=false, out=j3);
    Or(a=instruction[1], b=false, out=j2);
    Or(a=instruction[2], b=false, out=j1);

    // Get d (dest)
    Or(a=instruction[3], b=false, out=d3);
    Or(a=instruction[4], b=false, out=d2);
    Or(a=instruction[5], b=false, out=d1);

    
    // Get a (M or AD) (comp: acccccc)
    Or(a=instruction[12], b=false, out=a);

    // Get c
    Or(a=instruction[6], b=false, out=c6);
    Or(a=instruction[7], b=false, out=c5);
    Or(a=instruction[8], b=false, out=c4);
    Or(a=instruction[9], b=false, out=c3);
    Or(a=instruction[10], b=false, out=c2);
    Or(a=instruction[11], b=false, out=c1);


    // For A Register
    Mux16(a=instruction, b=outMInternal, sel=instructionType, out=outForA);
    Xor(a=true, b=instructionType, out=cInstruction);
    Or(a=cInstruction, b=d1, out=shouldStoreA);
    ARegister(in=outForA, load=shouldStoreA, out=outA, out[0..14]=addressM);
    

    // For D Register (only load for C Instruction)
    And(a=d2, b=instructionType, out=shouldLoadD);
    DRegister(in=outMInternal, load=shouldLoadD, out=outD);


    // Get A/M?
    Mux16(a=outA, b=inM, sel=a, out=outAorM);

    // ALU
    ALU(x=outD, y=outAorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outMInternal, zr=outZero, ng=outNegative);


    // Conditions to jump (only C Instruction)
    And(a=j1, b=outNegative, out=cj1);  // Jump if negative
    And(a=j2, b=outZero, out=cj2);  // Jump if zero
    
    Not(in=outZero, out=outZero1);
    Not(in=outNegative, out=outNegative1);
    And(a=outZero1, b=outNegative1, out=outPositive);  // notZero && notNegative -> Positive
    And(a=j3, b=outPositive, out=cj3);  // Jump if positive

    Or(a=cj1, b=cj2, out=cj4);
    Or(a=cj3, b=cj4, out=cj5);  // Only need 1 condition true
    And(a=cj5, b=instructionType, out=shouldJump);  // just increase if it is a A Instruction 



    // PC: Program counter
    PC(in=outA, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);


    // writeM (only C Instruction)
    And(a=instructionType, b=d3, out=shouldWriteM);
    Or(a=shouldWriteM, b=false, out=writeM);



}